ArniComp CPU Architecture and Instruction Set Reference

Version: 1.0 (2025-08-14)

1. Overview
- Data path: 8-bit.
- Address bus: 16-bit (split over MARH:MARL). Two memory addressing modes:
  - Low mode (ML): address = 0x00:marl, STRL/LDRL operate here.
  - High mode (MH): address = marh:marl, STRH/LDRH operate here.
- Harvard-like separation : program_memory (EEPROM) and data_memory (RAM), each 64 KiB.
- Registers (all 8-bit): RA, RD, ACC, MARL, MARH, PRL, PRH.
- Program counter (PC) is (PRH<<8)|PRL in emulator; JMP-family use PRH:PRL.
- Comparator/flags: hardware comparator compares ALU inputs (A vs B) on ADD/SUB/ADDI/SUBI setup paths and updates flags: EQ, LT, GT (unsigned semantics in emulator).

2. Register roles
- RA: general purpose; also used by LDI destination, and OUT uses RA as output address bus.
- RD: ALU left input latch. ALU computes using RD as one operand.
ArniComp ISA Specification (Rev 2 - Leading Zero Class Encoding)
==============================================================

1. Concept
-----------
Instruction class is determined by number of leading zero bits before the first 1. Patterns then subdivide. All instructions are single 8-bit words.

2. Instruction Patterns
-----------------------
1xxx xxxx  LDI  #imm7        ; ACC <- imm7 (0..127)
0000 0000  NOP               ; (legacy compatibility)
0000 0010  NOP               ; alternate encoding
0000 0001  HLT               ; halt CPU
0000 0011  CRA               ; clear RA only (does NOT modify ACC or flags)
0000 01cc  JUMP family       ; cc selects condition (see table)
0000 1sss  ADDI #sss         ; ACC <- ACC + imm3 (0..7)
0000 001z  SUBI #z           ; 2-bit immediate (assembler restricts 0..3)
0001 0sss  AND src           ; ACC <- ACC & src
0001 oop sss Arithmetic      ; oop=00 ADD, 01 SUB, 10 ADC, 11 SBC (ACC op= ACC (+/-) src [+carry])
01dddsss   MOV dest, src     ; dest & src encoded (see maps)

3. Field Maps
-------------
dest (MOV): 000 RA | 001 RD | 010 MARL | 011 MARH | 100 PRL | 101 PRH | 110 ML | 111 MH
src  (MOV/ALU/AND): 000 RA | 001 RD | 010 ACC | 011 CLR(=0) | 100 PCL | 101 PCH | 110 ML | 111 MH

4. Jump Conditions (cc)
----------------------
000 JMP | 001 JEQ | 010 JGT | 011 JLT | 100 JGE | 101 JLE | 110 JNE | 111 JC

5. Flags
--------
EQ, LT, GT from unsigned comparator (A vs B). New CARRY flag (C):
 ADD / ADC: C=1 if unsigned overflow (>0xFF)
 SUB / SBC / SUBI: C=1 if no borrow (A >= B + borrow_in)
 CRA only clears RA; ACC and all flags unchanged.

6. Arithmetic Semantics
-----------------------
ADD src : ACC = ACC + src
SUB src : ACC = ACC - src
ADC src : ACC = ACC + src + C
SBC src : ACC = ACC - (src + (1-C))
ADDI #n : ACC = ACC + n (n 3-bit)
SUBI #n : ACC = ACC - n (n 2-bit)
AND src : ACC = ACC & src
LDI #k  : ACC = k (7-bit)

7. MOV Semantics
----------------
Register to register copies. Special encodings:
 MOV ML, X  -> write X to memory[MARL]  (low page)
 MOV MH, X  -> write X to memory[MARH:MARL] (high page)
 MOV R, ML  -> read from memory[MARL] into R
 MOV R, MH  -> read from memory[MARH:MARL] into R
 MOV dest, CLR provides zero.

8. Carry & Jumps
----------------
JC jumps if C=1. Other jumps test comparator flags only. Comparator updates EQ/LT/GT on arithmetic setup paths; C only changes on arithmetic instructions themselves.

9. Dual NOP Rationale
---------------------
Two encodings reserved for timing and alignment flexibility; both perform no state change.

10. Implementation Files
------------------------
Assembler: assemblerV2_python/modules/AssemblyHelper.py (hardcoded patterns)
Emulator  : emulator/cpu.py (decode & execute)
UI Decode : emulator_ui/app.py (decode_instruction)

11. Migration Notes
-------------------
Legacy STR*/LDR*, OUT/IN instructions removed; memory and IO now via MOV and device bus abstraction. ACC is central accumulator; RA/RD general purpose.

12. Example
-----------
  LDI #10      ; ACC=10
  MOV RD, ACC  ; copy to RD
  LDI #5       ; ACC=5
  ADD RD       ; ACC=5+10=15, C=0
  ADD RD       ; may set carry
  JC @carry_path

13. Reserved / Future
---------------------
Patterns starting 000001 (except implemented) reserved for future immediate forms.

This document supersedes previous table-based opcode mapping (config.json driven) now deprecated.
13. Example sequences
